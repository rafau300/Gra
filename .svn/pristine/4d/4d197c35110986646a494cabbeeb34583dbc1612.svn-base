package pl.sector.test;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

import javax.swing.JApplet;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import pl.giera.Dane;

/**
 * Klasa gracza, w niej wykonywane sa przesylki, obliczenia, itp.
 */
public class MyApplet2 extends JApplet implements Serializable {

	private static final long serialVersionUID = 1L;
	int ktoryGracz;
	String host;
	static DatagramSocket socket=null;
	static int oczekiwanie=0;
    static boolean flaga = true; 
	Dane d1 = new Dane(250,300,1,0,false);
	Dane d2 = new Dane(350,300,2,0,false);
	static int petla=0;
	
/*----------------------------Strzelanie--------------------------------*/
	/**
	 * Za pomoca tej funkcji statki wystrzeliwuja pociski
	 * @param petla - numer petli, zeby mozna bylo strzelac z odpowiednia czestotliwoscia
	 */
	public void strzal(int petla) {
		if (petla %15 == 0) {
			if (ktoryGracz == 1) {
				int j=0;
				while (d1.pociskStrzelono[j] == true  && j<9) j++;
				if (j<10) {
					d1.pociskX[j]=d1.x;
					d1.pociskY[j]=d1.y;
					d1.pociskStrzelono[j]=true;
				}
			}
			if (ktoryGracz == 2) {
				int j=0;
				while (d2.pociskStrzelono[j] == true && j<9) j++;
				if (j<10) {
					d2.pociskX[j]=d2.x;
					d2.pociskY[j]=d2.y;
					d2.pociskStrzelono[j]=true;
				}
			}
		}
	}
	
/*------------------------Ruch pocisk�w--------------------------*/
	/**
	 * "Przesuwanie" pociskow
	 */
	public void ruchPociskow () {
		for (int j=0;j<10;j++) {
			if (ktoryGracz == 1) {
				if (d1.pociskY[j] >= 0 && d1.pociskStrzelono[j] == true ) d1.pociskY[j]-=5;
				else if (d1.pociskY[j]<0) d1.pociskStrzelono[j]=false; 
			}
			else {//gracz nr 2
				if (d2.pociskY[j] >= 0 && d2.pociskStrzelono[j] == true ) d2.pociskY[j]-=5;
				else if (d2.pociskY[j]<0) d2.pociskStrzelono[j]=false;
			}
		}
	}
	
/*----------------------------Detekcja koizji-----------------------------*/
	/**
	 * Detekcja kolizji
	 * @param ktory - ktory gracz wywolal funkcje
	 * @return Zwraca 1 jesli nastapila kolizja, a w efekcie - koniec gry dla tego gracza
	 */
	public int kolizja(int ktory) {
		if (ktory==1) {
			for (int i=0;i<10;i++) {
				if (d1.asteroidaHp[i] >0) {
				if (d1.x-24<=d1.asteroidaX[i]+10 && d1.x-24>=d1.asteroidaX[i]-10 && d1.y-24<=d1.asteroidaY[i]+10 && d1.y-24>=d1.asteroidaY[i]-10) return 1;
				if (d1.x-24<=d1.asteroidaX[i]+10 && d1.x-24>=d1.asteroidaX[i]-10 && d1.y+24>=d1.asteroidaY[i]-10 && d1.y+24<=d1.asteroidaY[i]+10) return 1;
				if (d1.x+24>=d1.asteroidaX[i]-10 && d1.x+24>=d1.asteroidaX[i]+10 && d1.y-24<=d1.asteroidaY[i]+10 && d1.y-24>=d1.asteroidaY[i]-10) return 1;
				if (d1.x+24>=d1.asteroidaX[i]-10 && d1.x+24>=d1.asteroidaX[i]+10 && d1.y+24>=d1.asteroidaY[i]-10 && d1.y+24<=d1.asteroidaY[i]+10) return 1;
		}}}
		if (ktory==2) {
			for (int i=0;i<10;i++) {
				if (d1.asteroidaHp[i] >0) {
				if (d2.x-24<=d1.asteroidaX[i]+10 && d2.x-24>=d1.asteroidaX[i]-10 && d2.y-24<=d1.asteroidaY[i]+10 && d2.y-24>=d1.asteroidaY[i]-10) return 1;
				if (d2.x-24<=d1.asteroidaX[i]+10 && d2.x-24>=d1.asteroidaX[i]-10 && d2.y+24>=d1.asteroidaY[i]-10 && d2.y+24<=d1.asteroidaY[i]+10) return 1;
				if (d2.x+24>=d1.asteroidaX[i]-10 && d2.x+24<=d1.asteroidaX[i]+10 && d2.y-24<=d1.asteroidaY[i]+10 && d2.y-24>=d1.asteroidaY[i]-10) return 1;
				if (d2.x+24>=d1.asteroidaX[i]-10 && d2.x+24<=d1.asteroidaX[i]+10 && d2.y+24>=d1.asteroidaY[i]-10 && d2.y+24<=d1.asteroidaY[i]+10) return 1;
			}}}
		return 0;
	}
	
/*------------------kolizja Pocisków z asteroidami---------------------*/	
	/**
	 * Sprawdza, czy pocisk uderzyl w przeszkode
	 * @return
	 */
	public int kolizjaPocisku() {
		boolean trafiono=false;
		if (ktoryGracz==1) {
			for (int i=0;i<10;i++) {
				if (d1.asteroidaHp[i] >0) {
				trafiono=false;
				for (int j=0;j<10;j++) {
				if (d1.pociskX[j]-2<=d1.asteroidaX[i]+10 && d1.pociskX[j]-2>=d1.asteroidaX[i]-10 && d1.pociskY[j]-2<=d1.asteroidaY[i]+10 && d1.pociskY[j]-2>=d1.asteroidaY[i]-10) trafiono=true;
				if (d1.pociskX[j]-2<=d1.asteroidaX[i]+10 && d1.pociskX[j]-2>=d1.asteroidaX[i]-10 && d1.pociskY[j]+2>=d1.asteroidaY[i]-10 && d1.pociskY[j]+2<=d1.asteroidaY[i]+10) trafiono=true;
				if (d1.pociskX[j]+2>=d1.asteroidaX[i]-10 && d1.pociskX[j]+2>=d1.asteroidaX[i]+10 && d1.pociskY[j]-2<=d1.asteroidaY[i]+10 && d1.pociskY[j]-2>=d1.asteroidaY[i]-10) trafiono=true;
				if (d1.pociskX[j]+2>=d1.asteroidaX[i]-10 && d1.pociskX[j]+2>=d1.asteroidaX[i]+10 && d1.pociskY[j]+2>=d1.asteroidaY[i]-10 && d1.pociskY[j]+2<=d1.asteroidaY[i]+10) trafiono=true;
		
				if (trafiono) {
					d1.asteroidaHp[i]-=5;
					d1.punkty+=5;
					d1.pociskStrzelono[j]=false;
				}		
		}}}
		}
		if (ktoryGracz==2) {
			for (int i=0;i<10;i++) {
				if (d1.asteroidaHp[i] >0) {
				trafiono=false;
				for (int j=0;j<10;j++) {
				if (d2.pociskX[j]-2<=d1.asteroidaX[i]+10 && d2.pociskX[j]-2>=d1.asteroidaX[i]-10 && d2.pociskY[j]-2<=d1.asteroidaY[i]+10 && d2.pociskY[j]-2>=d1.asteroidaY[i]-10) trafiono=true;
				if (d2.pociskX[j]-2<=d1.asteroidaX[i]+10 && d2.pociskX[j]-2>=d1.asteroidaX[i]-10 && d2.pociskY[j]+2>=d1.asteroidaY[i]-10 && d2.pociskY[j]+2<=d1.asteroidaY[i]+10) trafiono=true;
				if (d2.pociskX[j]+2>=d1.asteroidaX[i]-10 && d2.pociskX[j]+2>=d1.asteroidaX[i]+10 && d2.pociskY[j]-2<=d1.asteroidaY[i]+10 && d2.pociskY[j]-2>=d1.asteroidaY[i]-10) trafiono=true;
				if (d2.pociskX[j]+2>=d1.asteroidaX[i]-10 && d2.pociskX[j]+2>=d1.asteroidaX[i]+10 && d2.pociskY[j]+2>=d1.asteroidaY[i]-10 && d2.pociskY[j]+2<=d1.asteroidaY[i]+10) trafiono=true;
			
			if (trafiono) {
				d1.asteroidaHp[i]-=5;
				d2.punkty+=5;
				d2.pociskStrzelono[j]=false;
			}}}
			}}
		return 0;
	}
	
/*----------------------------Przesylanie obiektow------------------------*/
	/**
	 * Cyklicznie wywolywana funkcja. Przesyla obiekty do serwera, a potem je odbiera
	 * @return
	 */
	public int przesylka(){
		//String host = this.getDocumentBase().getHost();
		//Socket socket;
		ObjectOutputStream out = null;
		ObjectInputStream in = null;
		int zwroconyKod=0;
		try {//Przesy�ka obiekt�w na porcie 54322
			datagram = new DatagramPacket(buffer, buffer.length,
					InetAddress.getByName(host), 54321);
			socket.send(datagram);
			socket = new DatagramSocket(54322);
			out = new ObjectOutputStream(socket.getOutputStream());
			in = new ObjectInputStream(socket.());


			
			//while (!d1.koniecGry || !d2.koniecGry){
			if (ktoryGracz==1) {
				/*d1.x=gracz.x1;
				d1.y=gracz.y1;*/
				Dane.ktoryGracz=1;
				zwroconyKod=kolizja(1);
				if (zwroconyKod!=0) d1.koniecGry=true;
				else d1.koniecGry=false;
				
					out.writeObject(d1);
					out.flush();
			}
			
			if (ktoryGracz==2) {
				/*d2.x=gracz.x2;
				d2.y=gracz.y2;*/
				Dane.ktoryGracz=2;
				zwroconyKod=kolizja(2);
				if (zwroconyKod!=0) d2.koniecGry=true;
				else d2.koniecGry=false;
				
					out.writeObject(d2);
					out.flush();
				}

			
			d1=(Dane) in.readObject();
			/*gracz.x1=d1.x;
			gracz.y1=d1.y;*/


			d2=(Dane) in.readObject();
			/*gracz.x2=d2.x;
			gracz.y2=d2.y;*/

			//========================
			socket.close();
			
			if (d1.koniecGry || d2.koniecGry) { //gdy ktorys z graczy zakonczy gre
				JOptionPane.showMessageDialog(this, "Koniec Gry!", "Serwer", 0);
				socket.close();
				return 0;
			}
			//}
		}catch (Exception e) {
			JOptionPane.showMessageDialog(this, "Nie udalo sie polaczyc z serwerem","SERWER",0);
			e.printStackTrace();
		}
		return 0;
		} 

	
	/** 
	 * Inicjalizacja i cykliczne wywolywanie innych funkcji
	 * @see java.applet.Applet#init()
	 */
	@Override
/*-----------------------------Inicjalizacja------------------------------*/
	public void init() {
		JFrame f = new JFrame();
		f.setSize(640, 480);
		f.add(new MyBoard());
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.setVisible(true);
		
		//====
		String host = this.getDocumentBase().getHost();
		this.host=host;
		try {//Wyslanie na port 54321 informacji o przy�aczeniu si� do gry
			socket = new Socket(host, 54321);		
			socket.getOutputStream().write(12345);
			ktoryGracz=(socket.getInputStream().read());//Pobranie nr gracza
			//while(oczekiwanie !=1111) {
			oczekiwanie=socket.getInputStream().read();//Pobranie potwierdzenia o przy��czeniu si� innego gracza
			//}
			socket.close();
			repaint();
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, "Nie udalo sie polaczyc z serwerem","SERWER",0);
			e.printStackTrace(); }
		
		Thread t = new Thread(new Runnable()  {  //stworzenie nowego watku, zeby zsynchronizowac wysylanie, w tym przypadku mozna nazwac ten watek timerem
            public void run() {  
                try {  
                    while(flaga) {  
                        //System.out.print(".");  
                        Thread.sleep(30);  //co 30 ms
                        petla++;
                        strzal(petla);
                        ruchPociskow();
                        kolizjaPocisku();
                        if (!d1.koniecGry && !d2.koniecGry)przesylka();
                        else System.exit(1); //gdy gra sie zakonczy, zamknij aplikacje
                    }  
                }  
                catch(InterruptedException ie) {  
                    ie.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Wystapil blad w watku", "Aplet", 0);
                }  
            }  
        });  
        t.start(); //rozpoczecie korzystania z watku
		
	}
	
}
	

/**
 * W tej klasie rysujemy na ekranie i obslugujemy zdarzenia np. klikniecia mysza
 */

class MyBoard extends JComponent{

	
	private static final long serialVersionUID = 1L;
	
	MyApplet2 aplet = new MyApplet2();
	//wczytywanie obrazow
	Image tlo = Toolkit.getDefaultToolkit().createImage("obrazy/space.jpg");
	Image statek1 = Toolkit.getDefaultToolkit().createImage("obrazy/statek1.png");
	Image statek2 = Toolkit.getDefaultToolkit().createImage("obrazy/statek2.png");
	//String host =aplet.host;
/*---------------------------------Obsluga myszy----------------------------------------*/
	/**
	 * Pole, po ktorym poruszaja sie gracze
	 */
	public MyBoard() {
		addMouseListener(new MouseAdapter() {
			/** 
			 * Obsluga zdarzen myszy
			 * @see java.awt.event.MouseAdapter#mousePressed(java.awt.event.MouseEvent)
			 */
			public void mousePressed(MouseEvent e) {
				//repaint();
				if(aplet.ktoryGracz==1) {
					aplet.d1.x=e.getX()-24;
					aplet.d1.y=e.getY()-24;
					//aplet.przesylka();
					//repaint();
				}
				if(aplet.ktoryGracz==2) {
					aplet.d2.x=e.getX()-24;
					aplet.d2.y=e.getY()-24;
					//aplet.przesylka();
					//repaint();
					
			}
			}
		});
		
/*------------------------Obsluga klawiatury--------------------------------*/	
		JComponent jc = (JComponent) this;	//potrzebne do obslugi keyListenera
		jc.setFocusable(true);				//bez tego keyListener nie bedzie chodzic
		jc.addKeyListener(new KeyAdapter() {
			/** 
			 * Obsluga klawiatury
			 * @see java.awt.event.KeyAdapter#keyPressed(java.awt.event.KeyEvent)
			 */
			@Override
			public void keyPressed(KeyEvent e) {
				int klawisz = e.getKeyCode();
				
				if (klawisz == KeyEvent.VK_LEFT || klawisz == KeyEvent.VK_W) {
					if (aplet.ktoryGracz==1) aplet.d1.x-=5;
					else aplet.d2.x-=5;
				}
				else if (klawisz == KeyEvent.VK_RIGHT || klawisz == KeyEvent.VK_D) {
					if (aplet.ktoryGracz==1) aplet.d1.x+=5;
					else aplet.d2.x+=5;
				}
				else if (klawisz == KeyEvent.VK_UP || klawisz == KeyEvent.VK_W) {
					if (aplet.ktoryGracz==1) aplet.d1.y-=5;
					else aplet.d2.y-=5;
				}
				else if (klawisz == KeyEvent.VK_DOWN || klawisz == KeyEvent.VK_S) {
					if (aplet.ktoryGracz==1) aplet.d1.y+=5;
					else aplet.d2.y+=5;
				}
			}
		}
		);
		
	}

/**
 * Rysowanie na ekranie
 * @see javax.swing.JComponent#paintComponent(java.awt.Graphics)
 */
@Override
	public void paintComponent(Graphics g) {
		
/*----------------------------Rysowanie na ekranie----------------------------*/
		
		g.setColor(Color.black);
		g.fillRect(0, 0, 640, 480);
		g.drawImage(tlo,0,0,null);
		
		//rysowanie asteroid
		for (int i=0;i<10;i++) {
			if (aplet.d1.asteroidaX[i]>=-50  && aplet.d1.asteroidaHp[i] >0){
				g.setColor(Color.red);
				g.fillRect(aplet.d1.asteroidaX[i],aplet.d1.asteroidaY[i],20,20);
			}
		}
		
		//rysowanie statk�w
		g.drawImage(statek1, aplet.d1.x, aplet.d1.y, 48, 48, null);
		g.drawImage(statek2, aplet.d2.x, aplet.d2.y, 48, 48, null);
		
		g.setColor(Color.green);
		for (int i=0;i<5;i++) {
			if (aplet.d1.pociskStrzelono[i] == true) 
				g.fillRect(aplet.d1.pociskX[i] + 20, aplet.d1.pociskY[i], 4, 4);
			if (aplet.d2.pociskStrzelono[i] == true) 
				g.fillRect(aplet.d2.pociskX[i] + 20, aplet.d2.pociskY[i], 4, 4);
		}
		
		g.setColor(Color.white);
		if(aplet.ktoryGracz==0) 
			g.drawString("Nieudane polaczenie z serwerem" ,1, 20);
		else {
			g.drawString("Przylaczono sie do gry jako " + aplet.ktoryGracz + " gracz" ,1, 20);
			g.drawString("" + aplet.d1.punkty, aplet.d1.x+40, aplet.d1.y);
			g.drawString("" + aplet.d2.punkty, aplet.d2.x+40, aplet.d2.y);
		}
		super.repaint();
	}
}
