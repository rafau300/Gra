package pl.sector.test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.DatagramPacket;
import java.net.DatagramSocket;

import pl.giera.Dane;
/**
 * Klasa, w ktorej znajduje sie serwer.
 */

public class testS implements Serializable  {
	

	/**
	 * Klasa, w ktorej znajduje sie serwer.
	 */

	static DatagramSocket server;
	static DatagramSocket server2;
	static final long serialVersionUID = 1L;
	private static DatagramSocket[]gracz =new DatagramSocket[3];
	static Dane d1=new Dane(250,300,1,0,false);
	static Dane d2=new Dane(350,300,2,0,false);
	/**
	 * funkcja, w ktorej wykonuje sie serwer
	 * @param args
	 * @throws Exception
	 */
	public static void main(String[] args) throws Exception{
		
		DatagramSocket socket = new DatagramSocket(54321);
		byte[] buffer = new byte[1024];
		DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
		socket.receive(packet);	
			
		System.out.println("Uruchomiono serwer");
		
	
		//=========
		System.out.println(">>Rozpoczynam komunikacje");
		while (!d1.koniecGry || !d2.koniecGry) {
			if(d1.koniecGry || d2.koniecGry) {	//gdy obaj gracze zakoncza gre
				d1.koniecGry=true;
				d2.koniecGry=true;
				System.out.println("Koniec gry");
				server2.close();
			}
			 
			
		server = new DatagramSocket(54321);	//socket do przylaczenia sie o pobrania numeru gracza
		server2 = new DatagramSocket(54322);	//socket do przesylki obiektu "Dane"
		
		ByteArrayOutputStream bytes_out = new ByteArrayOutputStream();
		ByteArrayInputStream bytes_in = new ByteArrayInputStream(buffer);
		
		ObjectOutputStream out1 = new ObjectOutputStream(bytes_out);
		ObjectOutputStream out2 = new ObjectOutputStream(bytes_out);
		ObjectInputStream in1 = new ObjectInputStream(bytes_in);
		ObjectInputStream in2 = new ObjectInputStream(bytes_in);
				

		try {
		d1=(Dane) in1.readObject();
		for (int i=0;i<10;i++)
			if (d1.asteroidaHp[i]>0) {
				d1.asteroidaX[i]+=d1.asteroidaRX[i];
				d1.asteroidaY[i]+=d1.asteroidaRY[i];
			}
		}catch (Exception e) {
			System.out.println("1. Nie odebrano pakietu");
			e.printStackTrace();
		}
		try {
		d2=(Dane) in2.readObject();
		for (int i=0;i<10;i++)
			if (d2.asteroidaHp[i]>0) {
				d2.asteroidaX[i]+=d2.asteroidaRX[i];
				d2.asteroidaY[i]+=d2.asteroidaRY[i];
			}
		}catch (Exception e) {
			System.out.println("2. Nie odebrano pakietu");
			e.printStackTrace();
		}

		if (Dane.ktoryGracz==1) {//wysylanie danych w przypadku, gdy otrzymano pierwszy pakiet od pierwszego gracza
			out1.writeObject(d1);
			out1.writeObject(d2);
			out2.writeObject(d1);
			out2.writeObject(d2);}
		else {//gdy otrzymano najpierw pakiet od drugiego gracza
			out1.writeObject(d2);
			out1.writeObject(d1);
			out2.writeObject(d2);
			out2.writeObject(d1);}
		server2.close();
		server.close();
		}
		//==========
		System.exit(0);
		socket.close();
	}
}
